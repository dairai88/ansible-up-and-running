---
- name: Deploy database
  hosts: database
  become: true
  gather_facts: true

  handlers:
    - name: Restart mysql
      ansible.builtin.systemd:
        name: mysql
        state: restarted

  tasks:
    - name: Get database server ip
      ansible.builtin.set_fact:
        database_host: "{{ ansible_enp0s1.ipv4.address }}"

    - name: Listen
      ansible.builtin.lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        line: 'bind-address  = 0.0.0.0'
        regexp: '^bind-address'
        state: present
      notify: Restart mysql

    - name: Create database
      community.mysql.mysql_db:
        name: "{{ database_name }}"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Create database user
      community.mysql.mysql_user:
        name: "{{ database_user }}"
        password: "{{ database_password }}"
        priv: '{{ database_name }}.*:ALL'
        host: '%'
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Deploy Ghost
  hosts: ghost
  become: true
  gather_facts: true

  vars:
    data_dir: /data/ghostdata
    certs_dir: /data/certs
    net_name: ghostnet

  tasks:
    - name: Create network
      community.docker.docker_network:
        name: "{{ net_name }}"

    - name: Set database host
      ansible.builtin.set_fact:
        database_host: "{{ hostvars['mysql']['database_host'] }}"

    - name: Set ghost host
      ansible.builtin.set_fact:
        ghost_host: "{{ ansible_enp0s1.ipv4.address }}"

    - name: Display database server ip
      ansible.builtin.debug:
        var: database_host

    - name: Display ghost server ip
      ansible.builtin.debug:
        var: ghost_host

    - name: Create ghostdata directory
      ansible.builtin.file:
        path: "{{ data_dir }}"
        state: directory
        mode: "0750"

    - name: Start ghost container
      community.docker.docker_container:
        name: ghost
        image: ghost
        networks:
          - name: "{{ net_name }}"
        volumes:
          - "{{ data_dir }}:/var/lib/ghost/content"
        env:
          database__client: mysql
          database__connection__host: "{{ database_host }}"
          database__connection__user: "{{ database_user }}"
          database__connection__password: "{{ database_password }}"
          database__connection__database: "{{ database_name }}"
          url: "https://{{ ghost_host }}"
          NODE_ENV: production

    - name: Create certs directory
      ansible.builtin.file:
        path: "{{ certs_dir }}"
        state: directory
        mode: "0750"

    - name: Display host
      ansible.builtin.debug:
        var: ansible_host

    - name: Generate tls certs
      ansible.builtin.command: >
        openssl req -new -x509 -nodes
        -out "{{ certs_dir }}/nginx.crt"
        -keyout "{{ certs_dir }}/nginx.key"
        -subj "/CN={{ ansible_host }}" -days 3650
      args:
        creates: "{{ certs_dir }}/nginx.crt"
      register: cert_result
      changed_when: ('nginx.crt exists' not in cert_result.stdout)

    - name: Start nginx container
      community.docker.docker_container:
        name: nginx-ghost
        image: sundalei/nginx-ghost
        networks:
          - name: "{{ net_name }}"
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - "{{ certs_dir }}:/certs"
...
